import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import tensorflow as tf
import os

# Define paths to training and testing data
training_data_path = os.path.normpath("/content/drive/MyDrive/Training")
testing_data_path = os.path.normpath("/content/drive/MyDrive/Testing")

# Find a sample image from within a subdirectory in the training dataset
subdirectories = [os.path.join(training_data_path, d) for d in os.listdir(training_data_path) if os.path.isdir(os.path.join(training_data_path, d))]
sample_image_path = os.path.join(subdirectories[0], os.listdir(subdirectories[0])[0])  # Get the first image in the first subdirectory
original_image = load_img(sample_image_path)

# Convert image to array for preprocessing
original_image_array = img_to_array(original_image)

# Function to enhance contrast
def contrast_enhance(image):
    image = tf.image.resize(image, (128, 128))
    image = tf.image.adjust_contrast(image, 2)  # Increase contrast
    return image / 255.0

# Function for edge detection with green highlighting
def manual_edge_detection(image):
    image = tf.image.resize(image, (128, 128))
    image_gray = tf.image.rgb_to_grayscale(image)
    
    # Define a slightly less intense edge detection kernel
    edge_kernel = tf.constant([[-1, -1, -1],
                               [-1,  8, -1],
                               [-1, -1, -1]], dtype=tf.float32)
    edge_kernel = edge_kernel[:, :, tf.newaxis, tf.newaxis]
    
    # Apply convolution
    edges = tf.nn.conv2d(image_gray[tf.newaxis, ...], edge_kernel, strides=[1, 1, 1, 1], padding='SAME')
    edges = tf.squeeze(edges)
    
    # Reduce the intensity of edges
    edges = tf.clip_by_value(edges * 0.5, 0, 1)  # Scale down edge intensity
    
    # Convert edges to a green-highlighted version
    green_highlighted = tf.stack([tf.zeros_like(edges), edges, tf.zeros_like(edges)], axis=-1)
    
    return green_highlighted

# Function to create a rotated, color-inverted, high-contrast grayscale image
def rotated_inverted_high_contrast(image, angle):
    image = tf.image.rgb_to_grayscale(image)
    image = tf.image.resize(image, (128, 128))
    image = tf.image.adjust_contrast(image, 3)  # Increase contrast
    image = 1 - image  # Invert colors
    image = tf.image.rot90(image, k=angle)  # Rotate by 90 * angle
    return image

# Function to apply slight rotation and brightness adjustment
def rotated_and_bright(image, angle, brightness_factor=1.2):
    image = tf.image.resize(image, (128, 128))
    image = tf.image.rot90(image, k=angle)  # Rotating the image by 90 * angle
    image = tf.image.adjust_brightness(image, brightness_factor - 1)  # Adjust brightness
    return image

# Apply preprocessing to create processed images
contrast_image_array = contrast_enhance(original_image_array)
edge_image_array = manual_edge_detection(original_image_array)
rotated_inverted_high_contrast_image_array = rotated_inverted_high_contrast(original_image_array, 1)  # Rotate by 90 degrees
rotated_and_bright_image_array = rotated_and_bright(original_image_array, 1)  # Rotate by 90 degrees

# Display the original and processed images
plt.figure(figsize=(20, 10))

# Original image
plt.subplot(1, 5, 1)
plt.imshow(original_image)
plt.title("Original Image")
plt.axis("off")

# Contrast enhanced image
plt.subplot(1, 5, 2)
plt.imshow(contrast_image_array.numpy())
plt.title("Contrast Enhanced Image")
plt.axis("off")

# Edge detection image with green highlighting
plt.subplot(1, 5, 3)
plt.imshow(edge_image_array.numpy())
plt.title("Edge Detection with Green Highlighting")
plt.axis("off")

# Rotated, inverted high-contrast grayscale image
plt.subplot(1, 5, 4)
plt.imshow(rotated_inverted_high_contrast_image_array.numpy(), cmap='gray')
plt.title("Rotated, Inverted High-Contrast Grayscale")
plt.axis("off")

# Rotated and brightness-adjusted image
plt.subplot(1, 5, 5)
plt.imshow(rotated_and_bright_image_array.numpy())
plt.title("Rotated & Brightness Adjusted")
plt.axis("off")

plt.show()
